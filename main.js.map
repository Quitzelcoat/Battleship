{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B;AACA,qBAAqB,QAAQ,GAAG,EAAE,GAAG,EAAE;AACvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,0BAA0B,QAAQ,GAAG,EAAE,GAAG,EAAE;AAC5C;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B,gBAAgB;AAC1C;AACA;AACA,kCAAkC,QAAQ,GAAG,MAAM,GAAG,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,GAAG,EAAC;;;;;;;;;;;;;;;ACxEnB;AACA,6BAA6B,YAAY;AACzC;;AAEA;;AAEA;AACA,wBAAwB,MAAM;AAC9B;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE,IAAI,EAAE;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE,IAAI,EAAE;AACxD;AACA;;AAEA;;AAEA;AACA,MAAM;AACN;AACA,6BAA6B,MAAM;AACnC;AACA,QAAQ;AACR,gDAAgD,EAAE,IAAI,EAAE;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;ACjIc;AACV;;AAE7B;AACA,oBAAoB,yDAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D,EAAE,GAAG,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,oDAAI;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;ACtEtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;UCpDpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNkC;AACP;;AAE3B,oBAAoB,uDAAM;AAC1B,uBAAuB,uDAAM;AAC7B;;AAEA;AACA;AACA;;AAEA,qBAAqB,mDAAG;;AAExB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;;AAEA;AACA,oCAAoC,UAAU,GAAG,UAAU;AAC3D;AACA;AACA;AACA,QAAQ;AACR,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC","sources":["webpack://7-webpack-template/./src/dom.js","webpack://7-webpack-template/./src/gameboard.js","webpack://7-webpack-template/./src/players.js","webpack://7-webpack-template/./src/ship.js","webpack://7-webpack-template/webpack/bootstrap","webpack://7-webpack-template/webpack/runtime/define property getters","webpack://7-webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://7-webpack-template/webpack/runtime/make namespace object","webpack://7-webpack-template/./src/index.js"],"sourcesContent":["const dom = () => {\n  const renderBoard = (gameboard, boardId) => {\n    const boardContainer = document.getElementById(boardId);\n    boardContainer.innerHTML = \"\";\n\n    for (let y = 0; y < 10; y++) {\n      for (let x = 0; x < 10; x++) {\n        const cell = document.createElement(\"div\");\n        cell.id = `${boardId}-${x}-${y}`;\n        cell.dataset.x = x;\n        cell.dataset.y = y;\n        cell.classList.add(\"eachCell\");\n\n        if (gameboard.board[y][x]) {\n          cell.classList.add(\"ship\");\n        }\n\n        boardContainer.appendChild(cell);\n      }\n    }\n  };\n\n  function updateBoard(gameboard, boardId) {\n    for (let y = 0; y < 10; y++) {\n      for (let x = 0; x < 10; x++) {\n        const cellId = `${boardId}-${x}-${y}`;\n        const cell = document.getElementById(cellId);\n\n        if (!cell) {\n          console.error(`Cell with ID ${cellId} not found.`);\n          continue;\n        }\n\n        const ship = gameboard.board[y][x];\n\n        if (ship && ship.hits[ship.isVertical ? x - ship.x : y - ship.y]) {\n          cell.classList.add(\"hit\");\n        }\n\n        if (\n          gameboard.missedAttacks.some(\n            (attack) => attack.x === x && attack.y === y\n          )\n        ) {\n          cell.classList.add(\"miss\");\n        }\n\n        if (ship && ship.isSunk()) {\n          const shipLength = ship.length;\n          const startX = ship.x;\n          const startY = ship.y;\n\n          for (let i = 0; i < shipLength; i++) {\n            const sunkX = ship.isVertical ? startX : startX + i;\n            const sunkY = ship.isVertical ? startY + i : startY;\n            const sunkCellId = `${boardId}-${sunkX}-${sunkY}`;\n            const sunkCell = document.getElementById(sunkCellId);\n            if (sunkCell) {\n              sunkCell.classList.add(\"sunk\");\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    renderBoard,\n    updateBoard,\n  };\n};\n\nexport default dom;\n","const Gameboard = () => {\n  const board = Array.from({ length: 10 }, () => Array(10).fill(null));\n  const missedAttacks = [];\n\n  const hitShipCells = [];\n\n  const storeHitShipCell = (x, y) => {\n    hitShipCells.push({ x, y });\n  };\n\n  const placeShip = (ship, x, y, isVertical = false) => {\n    if (!isValidPlacement(ship, x, y, isVertical)) {\n      return false;\n    }\n\n    for (let i = 0; i < ship.length; i++) {\n      const xCoord = isVertical ? x : x + i;\n      const yCoord = isVertical ? y + i : y;\n      board[yCoord][xCoord] = ship;\n    }\n\n    ship.setPosition(x, y, isVertical);\n    return true;\n  };\n\n  const isValidPlacement = (ship, x, y, isVertical) => {\n    for (let i = 0; i < ship.length; i++) {\n      const xCoord = isVertical ? x : x + i;\n      const yCoord = isVertical ? y + i : y;\n\n      if (\n        xCoord < 0 ||\n        xCoord >= 10 ||\n        yCoord < 0 ||\n        yCoord >= 10 ||\n        (board[yCoord] && board[yCoord][xCoord] !== null)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const receiveAttack = (x, y) => {\n    if (\n      (board[y][x] && board[y][x].isMarkedSunk()) ||\n      missedAttacks.some((attack) => attack.x === x && attack.y === y)\n    ) {\n      console.log(`Invalid attack: Cell at (${x}, ${y}) already attacked.`);\n      return \"invalid\";\n    }\n\n    const ship = board[y][x];\n    if (ship) {\n      const position = ship.isVertical ? y - ship.y : x - ship.x;\n      const attackResult = ship.hit(position);\n      if (attackResult === \"invalid\") {\n        console.log(`Invalid attack: Cell at (${x}, ${y}) already hit.`);\n        return \"invalid\";\n      }\n\n      storeHitShipCell(x, y);\n\n      return attackResult;\n    } else {\n      if (!missedAttacks.some((attack) => attack.x === x && attack.y === y)) {\n        missedAttacks.push({ x, y });\n        return \"miss\";\n      } else {\n        console.log(`Invalid attack: Cell at (${x}, ${y}) already missed.`);\n        return \"invalid\";\n      }\n    }\n  };\n\n  const areAllShipsSunk = () => {\n    for (const row of board) {\n      for (const cell of row) {\n        if (cell && !cell.isSunk()) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const checkSunkenShips = () => {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        if (board[i][j] && board[i][j].isSunk()) {\n          board[i][j].markSunk();\n          return board[i][j];\n        }\n      }\n    }\n    return null;\n  };\n\n  const reset = () => {\n    // Clear the board array\n    for (let y = 0; y < 10; y++) {\n      for (let x = 0; x < 10; x++) {\n        board[y][x] = null;\n      }\n    }\n\n    // Clear the missed attacks and hit ship cells arrays\n    missedAttacks.length = 0;\n    hitShipCells.length = 0;\n  };\n\n  return {\n    placeShip,\n    receiveAttack,\n    areAllShipsSunk,\n    get board() {\n      return board;\n    },\n    get missedAttacks() {\n      return missedAttacks;\n    },\n    checkSunkenShips,\n    reset,\n    get hitShipCells() {\n      return hitShipCells;\n    },\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from \"./gameboard.js\";\nimport Ship from \"./ship.js\";\n\nconst Player = (type) => {\n  const gameboard = Gameboard();\n  let isComputer = type === \"computer\";\n\n  const attack = (x, y, opponentBoard) => {\n    if (isComputer) {\n      let validAttack = false;\n      while (!validAttack) {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n\n        const cell = document.getElementById(`playerBoard-${x}-${y}`);\n        validAttack =\n          !opponentBoard.missedAttacks.some(\n            (attack) => attack.x === x && attack.y === y\n          ) && !cell.classList.contains(\"hit\");\n      }\n    }\n\n    const attackResult = opponentBoard.receiveAttack(x, y);\n\n    const sunkShipInfo = opponentBoard.checkSunkenShips();\n    if (sunkShipInfo) {\n      for (let i = 0; i < sunkShipInfo.length; i++) {\n        const sunkX = sunkShipInfo.isVertical\n          ? sunkShipInfo.x\n          : sunkShipInfo.x + i;\n        const sunkY = sunkShipInfo.isVertical\n          ? sunkShipInfo.y + i\n          : sunkShipInfo.y;\n\n        if (sunkX >= 0 && sunkX < 10 && sunkY >= 0 && sunkY < 10) {\n          opponentBoard.board[sunkY][sunkX].markSunk();\n        }\n      }\n    }\n\n    return attackResult;\n  };\n\n  const placeShipsRandomly = () => {\n    const shipLength = [5, 4, 3, 3, 2];\n\n    for (const length of shipLength) {\n      let placed = false;\n\n      while (!placed) {\n        const x = Math.floor(Math.random() * 10);\n        const y = Math.floor(Math.random() * 10);\n        const isVertical = Math.random() < 0.5;\n\n        const ship = Ship(length);\n        placed = gameboard.placeShip(ship, x, y, isVertical);\n      }\n    }\n  };\n\n  return {\n    gameboard,\n    attack,\n    placeShipsRandomly,\n    get isComputer() {\n      return isComputer;\n    },\n  };\n};\n\nexport default Player;\n","const Ship = (length) => {\n  const hits = Array(length).fill(false);\n  let isSunkAlready = false;\n\n  let x, y, isVertical;\n\n  function setPosition(newX, newY, newIsVertical) {\n    x = newX;\n    y = newY;\n    isVertical = newIsVertical;\n  }\n\n  function hit(position) {\n    if (position >= 0 && position < this.length && !hits[position]) {\n      hits[position] = true;\n      return hits.every((hit) => hit) ? \"sunk\" : \"hit\";\n    } else {\n      return \"invalid\";\n    }\n  }\n\n  function isSunk() {\n    return hits.every((hit) => hit);\n  }\n\n  function markSunk() {\n    isSunkAlready = true;\n  }\n\n  return {\n    length,\n    get hits() {\n      return hits.filter((hit) => hit).length;\n    },\n    hit,\n    isSunk,\n    markSunk,\n    isMarkedSunk: () => isSunkAlready,\n\n    setPosition,\n    get x() {\n      return x;\n    },\n    get y() {\n      return y;\n    },\n    get isVertical() {\n      return isVertical;\n    },\n  };\n};\n\nexport default Ship;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Player from \"./players.js\";\nimport dom from \"./dom.js\";\n\nconst humanPlayer = Player(\"human\");\nconst computerPlayer = Player(\"computer\");\nlet currentPlayer = humanPlayer;\n\nlet gameStarted = false;\nhumanPlayer.placeShipsRandomly();\ncomputerPlayer.placeShipsRandomly();\n\nconst domFunctions = dom();\n\nconst computerBoardContainer = document.getElementById(\"computerBoard\");\nconst humanBoardContainer = document.getElementById(\"playerBoard\");\n\n// create the game boards\nfunction createBoard() {\n  if (humanBoardContainer && computerBoardContainer) {\n    domFunctions.renderBoard(humanPlayer.gameboard, \"playerBoard\");\n    domFunctions.renderBoard(computerPlayer.gameboard, \"computerBoard\");\n  } else {\n    console.error(\"Board containers not found in the DOM.\");\n  }\n}\n\n// computer turn\nfunction playComputerTurn() {\n  setTimeout(() => {\n    let attackResult;\n\n    do {\n      const x = Math.floor(Math.random() * 10);\n      const y = Math.floor(Math.random() * 10);\n      attackResult = computerPlayer.attack(x, y, humanPlayer.gameboard);\n    } while (attackResult === \"invalid\");\n\n    domFunctions.updateBoard(humanPlayer.gameboard, \"playerBoard\");\n\n    if (!humanPlayer.gameboard.areAllShipsSunk()) {\n      domFunctions.updateBoard(computerPlayer.gameboard, \"computerBoard\");\n    }\n\n    for (const hitCell of humanPlayer.gameboard.hitShipCells) {\n      const cellId = `playerBoard-${hitCell.x}-${hitCell.y}`;\n      const cell = document.getElementById(cellId);\n      if (cell) {\n        cell.classList.add(\"hit\");\n      } else {\n        console.error(`Cell with ID ${cellId} not found`);\n      }\n    }\n\n    if (humanPlayer.gameboard.areAllShipsSunk()) {\n      alert(\"Computer wins!\");\n    } else {\n      currentPlayer = humanPlayer;\n    }\n  }, 0);\n}\n\n// Player turn\nfunction PlayPlayerTurn(event) {\n  if (!currentPlayer.isComputer) {\n    const cell = event.target;\n    if (\n      cell.classList.contains(\"eachCell\") &&\n      !cell.classList.contains(\"hit\") &&\n      !cell.classList.contains(\"miss\")\n    ) {\n      const cellId = cell.id;\n      const [x, y] = cellId.split(\"-\").slice(1).map(Number);\n\n      const attackResult = humanPlayer.attack(x, y, computerPlayer.gameboard);\n      if (attackResult !== \"invalid\") {\n        domFunctions.updateBoard(computerPlayer.gameboard, \"computerBoard\");\n\n        if (attackResult === \"hit\") {\n          cell.classList.add(\"hit\");\n        } else if (attackResult === \"miss\") {\n          cell.classList.add(\"miss\");\n        }\n\n        if (computerPlayer.gameboard.areAllShipsSunk()) {\n          alert(\"You win!\");\n        } else {\n          currentPlayer = computerPlayer;\n          playComputerTurn();\n        }\n      } else {\n        console.log(\"Invalid attack. Please try again.\");\n      }\n    }\n  }\n}\n\n//creating the board\ncreateBoard();\n\nconst placeShipsButton = document.getElementById(\"placeShipsRandomly\");\nconst startGameButton = document.getElementById(\"startGame\");\n\n// play the game\nstartGameButton.addEventListener(\"click\", () => {\n  if (!gameStarted) {\n    gameStarted = true;\n    computerBoardContainer.addEventListener(\"click\", (event) => {\n      PlayPlayerTurn(event);\n    });\n    placeShipsButton.style.display = \"none\";\n    startGameButton.style.display = \"none\";\n  }\n});\n\n// place the ships\nplaceShipsButton.addEventListener(\"click\", () => {\n  if (!gameStarted) {\n    humanPlayer.gameboard.reset();\n    computerPlayer.gameboard.reset();\n\n    humanPlayer.placeShipsRandomly();\n    computerPlayer.placeShipsRandomly();\n\n    domFunctions.renderBoard(humanPlayer.gameboard, \"playerBoard\");\n    domFunctions.renderBoard(computerPlayer.gameboard, \"computerBoard\");\n  }\n});\n"],"names":[],"sourceRoot":""}