{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B;AACA,qBAAqB,QAAQ,GAAG,EAAE,GAAG,EAAE;AACvC,4BAA4B;AAC5B,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,0BAA0B,QAAQ,GAAG,EAAE,GAAG,EAAE;AAC5C;;AAEA;AACA,wCAAwC,QAAQ;AAChD;AACA;;AAEA;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA,iBAAiB,QAAQ,GAAG,MAAM,GAAG,MAAM;AAC3C;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,GAAG,EAAC;;;;;;;;;;;;;;;AChEnB;AACA,6BAA6B,YAAY;;AAEzC;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,2BAA2B,MAAM;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;ACrEc;AACV;;AAE7B;AACA,oBAAoB,yDAAS;AAC7B;;AAEA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,oDAAI;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;ACzDtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA,iEAAe,IAAI,EAAC;;;;;;;UCdpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN6C;AAC7C;AACsC;;AAEtC;AACA,oBAAoB,kEAAM;AAC1B,uBAAuB,kEAAM;AAC7B;;AAEA;AACA;;AAEA,qBAAqB,8DAAG;;AAExB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC","sources":["webpack://7-webpack-template/./src/components/dom.js","webpack://7-webpack-template/./src/components/gameboard.js","webpack://7-webpack-template/./src/components/players.js","webpack://7-webpack-template/./src/components/ship.js","webpack://7-webpack-template/webpack/bootstrap","webpack://7-webpack-template/webpack/runtime/define property getters","webpack://7-webpack-template/webpack/runtime/hasOwnProperty shorthand","webpack://7-webpack-template/webpack/runtime/make namespace object","webpack://7-webpack-template/./src/index.js"],"sourcesContent":["const dom = () => {\n  const renderBoard = (gameboard, boardId) => {\n    const boardContainer = document.getElementById(boardId);\n    boardContainer.innerHTML = \"\";\n\n    for (let y = 0; y < 10; y++) {\n      for (let x = 0; x < 10; x++) {\n        const cell = document.createElement(\"div\");\n        cell.id = `${boardId}-${x}-${y}`;\n        cell.dataset.x = x; // Add x data attribute\n        cell.dataset.y = y; // Add y data attribute\n        cell.classList.add(\"eachCell\");\n\n        if (gameboard.board[y][x]) {\n          cell.classList.add(\"ship\");\n        }\n\n        boardContainer.appendChild(cell);\n      }\n    }\n  };\n\n  function updateBoard(gameboard, boardId) {\n    for (let y = 0; y < 10; y++) {\n      for (let x = 0; x < 10; x++) {\n        const cellId = `${boardId}-${x}-${y}`;\n        const cell = document.getElementById(cellId);\n\n        if (!cell) {\n          console.error(`Cell with ID ${cellId} not found.`);\n          continue;\n        }\n\n        cell.classList.remove(\"hit\", \"miss\", \"sunk\");\n\n        const ship = gameboard.board[y][x];\n        if (ship && ship.isSunk()) {\n          for (let i = 0; i < ship.length; i++) {\n            let sunkX = ship.isVertical ? x : x + i;\n            let sunkY = ship.isVertical ? y + i : y;\n            const sunkCell = document.getElementById(\n              `${boardId}-${sunkX}-${sunkY}`\n            );\n            sunkCell.classList.add(\"sunk\");\n          }\n        } else if (ship && ship.hits > 0) {\n          cell.classList.add(\"hit\");\n        } else if (\n          gameboard.missedAttacks.some(\n            (attack) => attack.x === x && attack.y === y\n          )\n        ) {\n          cell.classList.add(\"miss\");\n        }\n      }\n    }\n  }\n\n  return {\n    renderBoard,\n    updateBoard,\n  };\n};\n\nexport default dom;\n","const Gameboard = () => {\n  const board = Array.from({ length: 10 }, () => Array(10).fill(null));\n\n  const missedAttacks = [];\n\n  const placeShip = (ship, x, y, isVertical = false) => {\n    if (!isValidPlacement(ship, x, y, isVertical)) {\n      return false;\n    }\n\n    for (let i = 0; i < ship.length; i++) {\n      const xCoord = isVertical ? x : x + i;\n      const yCoord = isVertical ? y + i : y;\n      board[yCoord][xCoord] = ship;\n    }\n    return true;\n  };\n\n  const isValidPlacement = (ship, x, y, isVertical) => {\n    for (let i = 0; i < ship.length; i++) {\n      const xCoord = isVertical ? x : x + i;\n      const yCoord = isVertical ? y + i : y;\n\n      if (\n        xCoord < 0 ||\n        xCoord >= 10 ||\n        yCoord < 0 ||\n        yCoord >= 10 ||\n        (board[yCoord] && board[yCoord][xCoord] !== null)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const receiveAttack = (x, y) => {\n    const ship = board[y][x];\n    if (ship) {\n      ship.hit();\n    } else {\n      missedAttacks.push({ x, y });\n    }\n  };\n\n  const areAllShipsSunk = () => {\n    for (const row of board) {\n      for (const cell of row) {\n        if (cell && !cell.isSunk()) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  return {\n    placeShip,\n    receiveAttack,\n    areAllShipsSunk,\n    get board() {\n      return board;\n    },\n    get missedAttacks() {\n      return missedAttacks;\n    },\n  };\n};\n\nexport default Gameboard;\n","import Gameboard from \"./gameboard.js\";\nimport Ship from \"./ship.js\";\n\nconst Player = (type) => {\n  const gameboard = Gameboard();\n  let isComputer = type === \"computer\";\n\n  const attack = (x, y, opponentBoard) => {\n    if (isComputer) {\n      const validAttacks = [];\n      for (let i = 0; i < 10; i++) {\n        for (let j = 0; j < 10; j++) {\n          if (\n            !opponentBoard.board[i][j] &&\n            !opponentBoard.missedAttacks.some(\n              (attack) => attack.y === j && attack.x === i\n            )\n          ) {\n            validAttacks.push({ x: j, y: i });\n          }\n        }\n      }\n      const randomIndex = Math.floor(Math.random() * validAttacks.length);\n      x = validAttacks[randomIndex].x;\n      y = validAttacks[randomIndex].y;\n    }\n\n    opponentBoard.receiveAttack(x, y);\n  };\n\n  const placeShipsRandomly = () => {\n    const shipLength = [5, 4, 3, 3, 2];\n\n    for (const length of shipLength) {\n      let placed = false;\n\n      while (!placed) {\n        const x = Math.floor(Math.random() * 10);\n        const y = Math.floor(Math.random() * 10);\n        const isVertical = Math.random() < 0.5;\n\n        const ship = Ship(length);\n        placed = gameboard.placeShip(ship, x, y, isVertical);\n      }\n    }\n  };\n\n  return {\n    gameboard,\n    attack,\n    placeShipsRandomly,\n    get isComputer() {\n      return isComputer;\n    },\n  };\n};\n\nexport default Player;\n","const Ship = (length) => {\n  let hits = 0;\n\n  function hit() {\n    hits++;\n  }\n\n  function isSunk() {\n    return hits >= length;\n  }\n\n  return { length, hit, isSunk };\n};\n\nexport default Ship;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Player from \"./components/players.js\";\n// import Ship from \"./components/ship.js\";\nimport dom from \"./components/dom.js\";\n\n// gameboard example run.\nconst humanPlayer = Player(\"human\");\nconst computerPlayer = Player(\"computer\");\nlet currentPlayer = humanPlayer;\n\nhumanPlayer.placeShipsRandomly();\ncomputerPlayer.placeShipsRandomly();\n\nconst domFunctions = dom();\n\nconst computerBoardContainer = document.getElementById(\"computerBoard\");\nconst humanBoardContainer = document.getElementById(\"playerBoard\");\n\nfunction createBoard() {\n  // Check if elements exist\n  if (humanBoardContainer && computerBoardContainer) {\n    domFunctions.renderBoard(humanPlayer.gameboard, \"playerBoard\");\n    domFunctions.renderBoard(computerPlayer.gameboard, \"computerBoard\");\n  } else {\n    console.error(\"Board containers not found in the DOM.\");\n  }\n}\n\n// function gamePlay() {}\n\nfunction playComputerTurn() {\n  setTimeout(() => {\n    const x = Math.floor(Math.random() * 10); // Generate random x\n    const y = Math.floor(Math.random() * 10); // Generate random y\n    computerPlayer.attack(x, y, humanPlayer.gameboard);\n    domFunctions.updateBoard(humanPlayer.gameboard, \"playerBoard\");\n    if (humanPlayer.gameboard.areAllShipsSunk()) {\n      alert(\"Computer wins!\");\n    } else {\n      currentPlayer = humanPlayer;\n    }\n  }, 1000);\n}\n\n//dom show and minipulation\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  createBoard();\n\n  computerBoardContainer.addEventListener(\"click\", (event) => {\n    if (!currentPlayer.isComputer) {\n      // Check if it's human's turn\n      const cell = event.target;\n      if (cell.classList.contains(\"eachCell\")) {\n        const cellId = cell.id;\n        const [x, y] = cellId.split(\"-\").slice(1);\n        const attackResult = humanPlayer.attack(\n          parseInt(x),\n          parseInt(y),\n          computerPlayer.gameboard\n        );\n        domFunctions.updateBoard(computerPlayer.gameboard, \"computerBoard\");\n        if (attackResult === \"hit\") {\n          cell.classList.add(\"hit\");\n        } else if (attackResult === \"miss\") {\n          cell.classList.add(\"miss\");\n        }\n\n        if (computerPlayer.gameboard.areAllShipsSunk()) {\n          alert(\"You win!\");\n        } else {\n          currentPlayer = computerPlayer;\n          playComputerTurn();\n        }\n      }\n    }\n  });\n});\n"],"names":[],"sourceRoot":""}